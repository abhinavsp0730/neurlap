<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://abhinavsp0730.github.io/neurlap/feed.xml" rel="self" type="application/atom+xml" /><link href="https://abhinavsp0730.github.io/neurlap/" rel="alternate" type="text/html" /><updated>2020-05-13T10:52:28-05:00</updated><id>https://abhinavsp0730.github.io/neurlap/feed.xml</id><title type="html">Abhinav Prakash</title><subtitle>An easy to use blogging platform with support for Jupyter Notebooks.</subtitle><entry><title type="html">TensorFlow callbacks in action</title><link href="https://abhinavsp0730.github.io/neurlap/markdown/2020/06/10/TENSORFLOW-CALLBACKS-IN-ACTION.html" rel="alternate" type="text/html" title="TensorFlow callbacks in action" /><published>2020-06-10T00:00:00-05:00</published><updated>2020-06-10T00:00:00-05:00</updated><id>https://abhinavsp0730.github.io/neurlap/markdown/2020/06/10/TENSORFLOW-CALLBACKS-IN-ACTION</id><content type="html" xml:base="https://abhinavsp0730.github.io/neurlap/markdown/2020/06/10/TENSORFLOW-CALLBACKS-IN-ACTION.html">&lt;h2 id=&quot;tensorflow-callbacks-in-action&quot;&gt;TensorFlow Callbacks in Action&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/4522/1*c5mBC2KTs0oQ_SRGnbtuLA.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In layman terms, if I want to introduce callbacks, then it’s the controller by which you can control your plane. Without these controllers, you’re not having any control over the plane, and you’ll crash.&lt;/p&gt;

&lt;p&gt;Callbacks: from keras.io, a callback is an object that can perform actions at various stages of training (e.g., at the start or end of an epoch, before or after a single batch, etc.).&lt;/p&gt;

&lt;p&gt;It means that callbacks are the functions by which you can perform a particular task during the training
process of your model. 
So, what can you do with these callbacks?&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You can perform a particular task after the starting and ending of the training/batch/ epochs.&lt;/li&gt;
  &lt;li&gt;You can periodically save the model states in the disk.&lt;/li&gt;
  &lt;li&gt;You can schedule the learning rate as per your task.&lt;/li&gt;
  &lt;li&gt;You can automatically stop the training when a particular condition becomes True.&lt;/li&gt;
  &lt;li&gt;And you can do anything during the training process by subclassing these callbacks.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, you can make your training output clean and colorful like this, pretty awesome, right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2974/1*RnOcxRCIhX7gtX7nv9RdGQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tensorflow provides a wide range of callbacks under the base class “tf.keras.callbacks. “For the full list of callbacks please visit &lt;a href=&quot;https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/Callback&quot;&gt;TensorFlow’s website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we’re going to cover some of the essential TensorFlow callbacks and how to use them to have full control over the training.&lt;/p&gt;

&lt;p&gt;The context of this article are:-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;custom callbacks by subclassing callback class.&lt;/li&gt;
  &lt;li&gt;Early stopping callback.&lt;/li&gt;
  &lt;li&gt;Model checkpoint callback.&lt;/li&gt;
  &lt;li&gt;ReduceOnPlateu callback.&lt;/li&gt;
  &lt;li&gt;Learning rate Scheduler.&lt;/li&gt;
  &lt;li&gt;Bonus package for making the output clean and colorful, as shown above.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But let’s first load the cats_vs_dogs dataset, I’ve been using the very small subclass of the original dataset. And then, let’s define our model architecture using sequential API. Throughout this article, I’m using this dataset and this model architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2852/1*kSuHL1TUQ8R_m8W8HNSXuw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/3976/1*pRCO7A6g-xN_Y_F08M_qyw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2792/1*aLfWln5XjPiqy33oW6WuyQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note:- This article is all about the TensorFlow callbacks and not for making a world-class ML model and for achieving the state-of-art result. So, throughout this article, ignore the loss and the metrics and try to focus on how to use these callbacks. The dataset is minimal, and it may overfit, but you can ignore all these things.&lt;/p&gt;

&lt;p&gt;So, without further delay, let’s start learning about the callbacks mentioned above.&lt;/p&gt;

&lt;h2 id=&quot;1-custom-callbacks-by-subclassing-callback-class&quot;&gt;1. Custom callbacks by subclassing callback class.&lt;/h2&gt;

&lt;p&gt;These callbacks come under the base class “tf.keras.callbacks.”
By subclassing these callbacks, we can perform certain functions when the training/batch/epochs have started or ended.
For this, we can override the function of callback classes.
The name of these functions is self explain their behavior.
For example def on_train_begin(), this means what to do when
training will begin.
Let’s see below how to override these functions. We can
also, monitor logs and perform certain actions, generally at 
the starting or the ending of the training/batch/epochs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/3636/1*RGOhsL79FZa8wj0lKlyqgg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;output&quot;&gt;Output:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/4096/1*w03z-RdHpES2_24NqZj17Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-earlystopping-callback&quot;&gt;2. EarlyStopping Callback.&lt;/h2&gt;

&lt;p&gt;Suppose we don’t know about the callbacks, and you want to prevent the overfitting of the model caused by training our model into extra epochs(we’re not god so that we know at how many epochs our model is going to converge). So, we plot the val_loss vs. epochs graph and examine
how many epochs it’s started overfitting the data. Then we’ll re-train our model in less than that epoch number.
What if I’ll tell you don’t have to do this thing manually.
Yes, you can do this by using EarlyStopping Callback.
So, let’s see how one can use this callback.&lt;/p&gt;

&lt;p&gt;First, import the callback, and then create the instance of the
EarlyStopping callback and pass the arguments as per our needs.
Lemme explain these arguements .&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;“monitor” you can pass the loss or the metric.
Generally, we pass val_loss and monitor it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“min_delta” you can pass an integer in this argument.
In simple words, you’re telling the callback that the model
is not improving if it’s not decreasing more/less than the loss/metrics.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“patience,” it means about how many epochs to wait.
And after that, if there is no improvement seen in the
model performance according to the value of “min delta,” then stop the training.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“mode”
By default it’s set to ‘auto’ this comes handy when
you’re dealing with the custom loss/metric. So, you can 
tell the callback whether the model is improving when
its custom loss/metric is decreasing then set it to “min” 
or increasing then set it to “max.”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2556/1*AZnvwzjQZ9mwmQqRVqalRA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-reducelronplateau&quot;&gt;3. ReduceLROnPlateau.&lt;/h2&gt;

&lt;p&gt;This callback is used to reduce the learning rate if there is 
not any improvement in the loss/metric.&lt;/p&gt;

&lt;p&gt;The arguments are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;“monitor” it’s set to that loss/metric as a string
 of which we are reducing the learning if it’ll not improve.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“factor” You can pass an integer in this argument,
and say your current learning rate is LR, then if
there is not any improvement seen in the monitored loss/metric,
then the learning is going to decrease by that “factor.”
i.e new learning rate = lr * factor&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Verbose”
You can set verbose =1 to see the learning rate at every epoch.
Or verbose = 0 to disable it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The argument min_delta and mode are the same as explained in the arguments of EarlyStopping Callback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2724/1*MnHPbv6vcM7s5y9_0KNgPA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-modelcheckpoint&quot;&gt;4. ModelCheckpoint&lt;/h2&gt;

&lt;p&gt;Let’s imagine you’re training a heavy model like Bert in colab,
and it requires a lot of time for training. So, you started the model training and went for sleep. And then the next morning
you wake up, and you open your colab.
But you’ll see the “Runtime Disconnect” message on your screen.
Sounds like a nightmare tough?
For this problem, ModelCheckpoint comes as a savior in our life. We can save the checkpoints at the end of every epoch.
So, that we can load the weights or resume the training if 
something terrible happens while training.&lt;/p&gt;

&lt;p&gt;So, let’s see how we can use this callback. We can save
the model checkpoint in Keras h5/hd5 format or TensorFlow pb
format. If you pass the argument “filepath= model.h5”(.h5 extension)
it’ll be saved in the Keras format or “filepath= model.p”(.pb extension)
for saving in the TensorFlow model format.&lt;/p&gt;

&lt;p&gt;Also, there are two options to save the checkpoint either you can save the entire architecture+weights or just the weights. You can do this by setting “save_only_weights=True” or “save_only_weights=False”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2928/1*vONkDZiWccWGODEcldupQQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-learningratescheduler&quot;&gt;5. LearningRateScheduler&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;The simplest way to schedule the learning is to decrease the learning rate 
linearly from a large initial value to a small value. 
This allows large weight changes at the beginning of the 
the learning process and small changes or fine-tuning towards
the end of the learning process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see how to schedule the learning rate. For this, we have to
define an auxiliary function that contains the rules for
alternating the learning rate. 
And then we can simply pass the name of this auxiliary function
to the argument of the object of the LearningRateScheduler class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/3736/1*SSwVhCH4nNh9YMVT2wpfFw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;output-1&quot;&gt;Output:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/4096/1*x9kGtMuAvqXEpbn00uNf_g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lastly here is the utility file to make training output cleaner and colorful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2974/1*RnOcxRCIhX7gtX7nv9RdGQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/abhinavsp0730/callback_blog&quot;&gt;Repository on Github&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;You can run all the code above on &lt;a href=&quot;https://colab.research.google.com/drive/1HRAt-ViaZW2BpwjY51rn64W3VBrTp-FI?usp=sharing&quot;&gt;Google’s colab&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">TensorFlow Callbacks in Action</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://abhinavsp0730.github.io/neurlap/images/PicsArt_05-10-12.13.02.jpg" /><media:content medium="image" url="https://abhinavsp0730.github.io/neurlap/images/PicsArt_05-10-12.13.02.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Tf.estimator, a Tensorflow High-level API</title><link href="https://abhinavsp0730.github.io/neurlap/markdown/2019/10/07/Tf.estimator-a-Tensorflow-High-level-API.html" rel="alternate" type="text/html" title="Tf.estimator, a Tensorflow High-level API" /><published>2019-10-07T00:00:00-05:00</published><updated>2019-10-07T00:00:00-05:00</updated><id>https://abhinavsp0730.github.io/neurlap/markdown/2019/10/07/Tf.estimator-a-Tensorflow-High-level-API</id><content type="html" xml:base="https://abhinavsp0730.github.io/neurlap/markdown/2019/10/07/Tf.estimator-a-Tensorflow-High-level-API.html">&lt;h2 id=&quot;tfestimator-a-tensorflow-high-level-api&quot;&gt;Tf.estimator, a Tensorflow High-level API&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2460/1*FyA1WjY8wC4p5eIt43jTHA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now Tensorflow 2.0 has been officially released and it’s having two high-level deep learning APIs.
The first one is tf.keras and another one is tf.estimator. You can see the list of TensorFlow’s Python API in the picture above. Some of you are familiar with building an ML model using Keras. But we’re not so familiar with tf.estimator (Assuming we refer to a beginner in ML).
So let us understand tf.estimator.&lt;/p&gt;

&lt;h2 id=&quot;the-context-of-this-article-is&quot;&gt;The context of this article is:&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Giving you an idea about what tf.estimator is all about.
2.What tasks we’ve to follow while writing the TensorFlow program based on Estimators(pre-made Estimators).&lt;/li&gt;
    &lt;li&gt;Advantages .
4.Estimators capabilities.&lt;/li&gt;
    &lt;li&gt;We’re going to build and test a model by using tf.estimator that classifies iris flowers into there species.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-tfestimator&quot;&gt;What is tf.estimator?&lt;/h2&gt;

&lt;p&gt;An Estimator is TensorFlow’s high-level representation of a complete model, and it has been designed for easy scaling and asynchronous training. It’s used to train the neural network model and use them to predict new data. It’s a high-level API that sits on top of the low-level core TensorFlow API.
One can use a pre-made estimator or custom estimator.&lt;/p&gt;

&lt;h3 id=&quot;1-pre-made-estimators&quot;&gt;1. Pre-made Estimators&lt;/h3&gt;

&lt;p&gt;Pre-made Estimators enable you to work at a much higher conceptual level than the base TensorFlow APIs. You no longer have to worry about creating the computational graph or sessions since Estimators handle all the “plumbing” for you. Furthermore, pre-made Estimators let you experiment with different model architectures by making only minimal code changes. tf.estimator. DNNClassifier, for example, is a pre-made Estimator class that trains classification models based on dense, feed-forward neural networks.&lt;/p&gt;

&lt;h3 id=&quot;2-custom-estimator&quot;&gt;2. Custom estimator&lt;/h3&gt;

&lt;p&gt;The heart of every Estimator — whether pre-made or custom — is its model function, which is a method that builds graphs for training, evaluation, and prediction. When you are using a pre-made Estimator, someone else has already implemented the model function. When relying on a custom Estimator, you must write the model function yourself.
In this model, we’re mainly dealing with pre-made estimators&lt;/p&gt;

&lt;h2 id=&quot;tasks-for-writing-tensorflow-pre-made-estimators&quot;&gt;Tasks for writing TensorFlow pre-made estimators.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2124/1*cv-u3ZwrOYiYlGzh1Yhz0g.png&quot; alt=&quot;Source. [https://torres.ai](https://torres.ai)&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;1.Create one or more input functions.&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Define the model’s feature columns.&lt;/li&gt;
    &lt;li&gt;Instantiate an Estimator, specifying the feature columns and various hyperparameters.&lt;/li&gt;
    &lt;li&gt;Call one or more methods on the Estimator object, passing the appropriate input function as the source of the data.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Later in this article, we’re going to implement the above tasks for iris classification.&lt;/p&gt;

&lt;h2 id=&quot;advantages&quot;&gt;Advantages&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;h1 id=&quot;the-tfestimator-provides-some-capabilities-currently-still-under-development-for-tfkeras&quot;&gt;The tf.estimator provides some capabilities currently still under development for tf.keras.&lt;/h1&gt;
  &lt;p&gt;#These are:-
#1.We can conduct distributed training across multiple servers with the Estimators API
#2.Full TFX integration.
#TensorFlow Extended (TFX) is an end-to-end platform for deploying production ML pipelines. The tf.estimator is supported for fully TFX integration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;estimators-capabilities&quot;&gt;Estimators capabilities&lt;/h2&gt;

&lt;p&gt;Estimators provide the following benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You can run Estimator-based models on a localhost or a distributed multi-server environment without changing your model. Furthermore, you can run Estimator-based models on CPUs, GPUs, or TPUs without recoding your model.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Estimators provide a safely distributed training loop that controls how and when to:
 (a)load data
 (b)handle exceptions
 ©create checkpoint files and recover from failures
 (d)save summaries for TensorBoard&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;iris-classifier-using-tfestimator&quot;&gt;Iris classifier using tf.estimator&lt;/h2&gt;

&lt;p&gt;We’re going to build an iris classifier using tf.estimator. The dataset we’re using is iris data set which is having four features sepal length, sepal width, petal length &amp;amp; petal width and three labels Setosa, Versicolor &amp;amp; Virginica.
But first, we import all the dependencies&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from __future__ import absolute_import, division, print_function, unicode_literals


import tensorflow as tf

import pandas as pd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then we preprocess the data to perform the following task:-&lt;/p&gt;

&lt;p&gt;(a)Create one or more input functions.
 (b)Define the model’s feature columns.
 (c )Instantiate an Estimator, specifying the feature columns and various hyperparameters.
 (d)Call one or more methods on the Estimator object, passing the appropriate input function as the source of the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preprocessing the data&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CSV_COLUMN_NAMES = ['SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth', 'Species']
SPECIES = ['Setosa', 'Versicolor', 'Virginica']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Downloading the data set.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;train_path = tf.keras.utils.get_file(
    &quot;iris_training.csv&quot;, &quot;https://storage.googleapis.com/download.tensorflow.org/data/iris_training.csv&quot;)
test_path = tf.keras.utils.get_file(
    &quot;iris_test.csv&quot;, &quot;https://storage.googleapis.com/download.tensorflow.org/data/iris_test.csv&quot;)

train = pd.read_csv(train_path, names=CSV_COLUMN_NAMES, header=0)
test = pd.read_csv(test_path, names=CSV_COLUMN_NAMES, header=0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-an-input-function&quot;&gt;Creating an input function&lt;/h3&gt;

&lt;p&gt;You must create input functions to supply data for training, evaluating, and prediction.&lt;/p&gt;

&lt;p&gt;An input function is a function that returns a tf.data.Dataset object which outputs the following two-element tuple:&lt;/p&gt;

&lt;p&gt;features — A Python dictionary in which:
 (a)Each key is the name of a feature.
 (b)Each value is an array containing all of that feature’s values.
 label — An array containing the values of the label for every example.
We’re using pandas for building input pipeline&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def input_fn(features, labels, training=True, batch_size=256):
    &quot;&quot;&quot;An input function for training or evaluating&quot;&quot;&quot;
    # Convert the inputs to a Dataset.
    dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))

    # Shuffle and repeat if you are in training mode.
    if training:
        dataset = dataset.shuffle(1000).repeat()
    
    return dataset.batch(batch_size)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;define-the-feature-columns&quot;&gt;Define the feature columns&lt;/h3&gt;

&lt;p&gt;A feature column is an object describing how the model should use raw input data from the features dictionary. When you build an Estimator model, we pass it a list of feature columns that describe each of the features you want the model to use. The tf.feature_column module provides many options for representing data to the model.&lt;/p&gt;

&lt;p&gt;For Iris, the 4 raw features are numeric values, so we’ll build a list of feature columns to tell the Estimator model to represent each of the four features as 32-bit floating-point values. Therefore, the code to create the feature column is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Feature columns describe how to use the input.
my_feature_columns = []
for key in train.keys():
    my_feature_columns.append(tf.feature_column.numeric_column(key=key))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;instantiate-an-estimator&quot;&gt;Instantiate an estimator&lt;/h2&gt;

&lt;p&gt;The Iris problem is a classic classification problem. Fortunately, TensorFlow provides several pre-made classifier Estimators, including:&lt;/p&gt;

&lt;p&gt;a. tf.estimator.DNNClassifier for deep models that perform multi-class classification.
 b. tf.estimator.DNNLinearCombinedClassifier for wide &amp;amp; deep models.
 c. tf.estimator.LinearClassifier for classifiers based on linear models.&lt;/p&gt;

&lt;p&gt;For the Iris problem, tf.estimator.DNNClassifier seems like the best choice. Here’s how we instantiated this Estimator:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Build a DNN with 2 hidden layers with 30 and 10 hidden nodes each.
classifier = tf.estimator.DNNClassifier(
    feature_columns=my_feature_columns,
    # Two hidden layers of 10 nodes each.
    hidden_units=[30, 10],
    # The model must choose between 3 classes.
    n_classes=3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;train-evaluate-and-predict&quot;&gt;Train, Evaluate, and Predict&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Train the model&lt;/em&gt;
Train the model by calling the Estimator’s train method as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Train the Model.
classifier.train(
    input_fn=lambda: input_fn(train, train_y, training=True),
    steps=5000)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Evaluate&lt;/p&gt;

&lt;p&gt;Now that the model has been trained, you can get some statistics on its performance. The following code block evaluates the accuracy of the trained model on the test data:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eval_result = classifier.evaluate(
    input_fn=lambda: input_fn(test, test_y, training=False))

print('\nTest set accuracy: {accuracy:0.3f}\n'.format(**eval_result))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After evaluating it we’ll get an accuracy of about 56%&lt;/p&gt;

&lt;h3 id=&quot;making-predictions-inferring-from-the-trained-model&quot;&gt;Making predictions (inferring) from the trained model&lt;/h3&gt;

&lt;p&gt;You now have a trained model that produces good evaluation results. You can now use the trained model to predict the species of an Iris flower based on some unlabeled measurements. As with training and evaluation, you make predictions using a single function call:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Generate predictions from the model
expected = ['Setosa', 'Versicolor', 'Virginica']
predict_x = {
    'SepalLength': [5.1, 5.9, 6.9],
    'SepalWidth': [3.3, 3.0, 3.1],
    'PetalLength': [1.7, 4.2, 5.4],
    'PetalWidth': [0.5, 1.5, 2.1],
}

def input_fn(features, batch_size=256):
    &quot;&quot;&quot;An input function for prediction.&quot;&quot;&quot;
    # Convert the inputs to a Dataset without labels.
    return tf.data.Dataset.from_tensor_slices(dict(features)).batch(batch_size)

predictions = classifier.predict(
    input_fn=lambda: input_fn(predict_x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The predict method returns a Python iterable, yielding a dictionary of prediction results for each example. The following code prints a few predictions and their probabilities:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for pred_dict, expec in zip(predictions, expected):
    class_id = pred_dict['class_ids'][0]
    probability = pred_dict['probabilities'][class_id]

    print('Prediction is &quot;{}&quot; ({:.1f}%), expected &quot;{}&quot;'.format(
        SPECIES[class_id], 100 * probability, expec))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll get an output like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO:tensorflow:Calling model_fn.
INFO:tensorflow:Done calling model_fn.
INFO:tensorflow:Graph was finalized.
INFO:tensorflow:Restoring parameters from /tmp/tmpy5w5zoj8/model.ckpt-5000
INFO:tensorflow:Running local_init_op.
INFO:tensorflow:Done running local_init_op.
Prediction is &quot;Setosa&quot; (73.0%), expected &quot;Setosa&quot;
Prediction is &quot;Virginica&quot; (42.6%), expected &quot;Versicolor&quot;
Prediction is &quot;Virginica&quot; (49.0%), expected &quot;Virginica&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;refrences--tensorflows-official-documentation&quot;&gt;Refrences:- Tensorflow’s official Documentation&lt;/h3&gt;

&lt;p&gt;Hope you like this article&lt;/p&gt;

&lt;p&gt;Do you know what, you can hit the clap button 50 times in medium?
If you like this blog, show some love by doing claps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*HnhqbqJ1vlHFEZmO5oEtqQ.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Tf.estimator, a Tensorflow High-level API</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://abhinavsp0730.github.io/neurlap/images/article1.png" /><media:content medium="image" url="https://abhinavsp0730.github.io/neurlap/images/article1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Exploring Deep Dream using Tensorflow 2.0 .</title><link href="https://abhinavsp0730.github.io/neurlap/markdown/2019/09/14/Exploring-Deep-Dream-using-Tensorflow-2.html" rel="alternate" type="text/html" title="Exploring Deep Dream using Tensorflow 2.0 ." /><published>2019-09-14T00:00:00-05:00</published><updated>2019-09-14T00:00:00-05:00</updated><id>https://abhinavsp0730.github.io/neurlap/markdown/2019/09/14/Exploring-Deep-Dream-using-Tensorflow-2</id><content type="html" xml:base="https://abhinavsp0730.github.io/neurlap/markdown/2019/09/14/Exploring-Deep-Dream-using-Tensorflow-2.html">&lt;h3 id=&quot;diving-into-deep-dream-using-tensorflow--towards-ai&quot;&gt;Diving Into Deep Dream using Tensorflow | &lt;a href=&quot;https://towardsai.net&quot;&gt;Towards AI&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&quot;exploring-deep-dream-using-tensorflow-20&quot;&gt;Exploring Deep Dream using Tensorflow 2.0&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2048/1*Lf4xTIYt1minBvceeAr69g.jpeg&quot; alt=&quot;Deep Dream Using Tensorflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*4W_ov8dmK4-qDCDpYLRuJA.jpeg&quot; alt=&quot;My image which generated by Deep Dream.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Whenever any person hears about Deep Learning or Neural Network the things which first come into their mind are that it’s used for Object Detection, Face Recognition, Natural Language Processing, and Speech Recognition.
But Neural Network is also capable of generating images. And one of the state-of-the-art methods is called Deep Dream.&lt;/p&gt;

&lt;h2 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;Deep Dream is a computer vision program created by Google engineer Alex Mordvintsev which uses a convolutional neural network to find and enhance patterns in images via algorithmic pareidolia, thus creating a Dream-like hallucinogenic appearance in the deliberately over-processed images.&lt;/p&gt;

&lt;h3 id=&quot;some-images-which-is-generated-using-deep-dream&quot;&gt;Some images which is generated using Deep Dream&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*3E2O-2ZlXHlqWzPxVTQWxA.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*KtXxRlN5vTIbYfA-SYm4tg.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*KncLstAsawToa3hTQiU1Kg.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*AMI3rUyybuSEbMqm6pS8Lg.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;In simple terms, many levels of neural networks process the images input into the program. The artificial neurons are calculated and the weight of their sum processed through the roughly three-layered network: low, intermediate, and high-level layers. The lower levels are responsible for more basic edges, corners, and textures. By maximizing those levels, the picture would end up looking more like a Van Gogh. The higher levels are responsible for more detailed, hierarchical input like buildings and other elaborate objects. When the higher levels are maximized, the picture looks more like a jumbled Dali.&lt;/p&gt;

&lt;h2 id=&quot;let-us-create-our-first-simple-deep-dream&quot;&gt;Let us create our first simple Deep Dream.&lt;/h2&gt;

&lt;p&gt;In this tutorial, we’re going to use Tensorflow 2.0 and we run it on Google Colab.
In the following 6 steps, we’re going to build our first deep dream model.
So let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;1-importing-all-dependencies&quot;&gt;1. Importing all dependencies&lt;/h3&gt;

&lt;p&gt;Here we’re going to use Indian actress Deepika Padukone image and then preproccess it.&lt;/p&gt;

&lt;iframe src=&quot;https://medium.com/media/d9acb142f51fb654054cbbcd7bc8e6fb&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;iframe src=&quot;https://medium.com/media/23b6ce411bd9d0d9baaf15077236cd3e&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;iframe src=&quot;https://medium.com/media/82302328e395c82fc1e57f97314fe6e5&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;iframe src=&quot;https://medium.com/media/00f9fbc0468c6a95c52cc97e5343b65a&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;output:-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/3840/1*PqA_PdYHSnss9DnGBZrbVA.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-prepare-the-feature-extraction-model&quot;&gt;2. Prepare the feature extraction model&lt;/h3&gt;

&lt;p&gt;Download and prepare a pre-trained image classification model. You will use InceptionV3 which is similar to the model originally used in DeepDream.
The InceptionV3 architecture is quite large (for a graph of the model architecture see TensorFlow’s research repo). For DeepDream, the layers of interest are those where the convolutions are concatenated. There are 11 of these layers in InceptionV3, named ‘mixed0’ though ‘mixed10’. Using different layers will result in different dream-like images. Deeper layers respond to higher-level features (such as eyes and faces), while earlier layers respond to simpler features (such as edges, shapes, and textures). Feel free to experiment with the layers selected below, but keep in mind that deeper layers (those with a higher index) will take longer to train on since the gradient computation is deeper.&lt;/p&gt;

&lt;iframe src=&quot;https://medium.com/media/832ee111f1ee6cd5f935acc7a6b41e49&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;3-calculate-loss&quot;&gt;3. Calculate loss&lt;/h3&gt;

&lt;p&gt;The loss is the sum of the activations in the chosen layers. The loss is normalized at each layer so the contribution from larger layers does not outweigh smaller layers.&lt;/p&gt;

&lt;iframe src=&quot;https://medium.com/media/aa0634118c16100b9d3c974531fe7122&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;4-gradient-ascent&quot;&gt;4. Gradient ascent&lt;/h3&gt;

&lt;p&gt;Once you have calculated the loss for the chosen layers, all that is left is to calculate the gradients with respect to the image and add them to the original image.
Adding the gradients to the image enhances the patterns seen by the network. At each step, you will have created an image that increasingly excites the activations of certain layers in the network.&lt;/p&gt;

&lt;iframe src=&quot;https://medium.com/media/74fb80290487c121b9adf17b484b76a9&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;OUTPUT:-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*y6cbbE35DhF3cYJGQvM3eg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-taking-it-up-an-octave&quot;&gt;5. Taking it up an octave&lt;/h3&gt;

&lt;p&gt;Pretty good, but there are a few issues with this first attempt:
 (a) The output is noisy (this could be addressed with a tf.image.total_variation loss).
 (b)The image is low resolution.
 (c)The patterns appear like they’re all happening at the same granularity.
To overcome these issues we can perform the previous gradient ascent approach, then increase the size of the image (which is referred to as an octave), and repeat this process for multiple octaves.&lt;/p&gt;

&lt;iframe src=&quot;https://medium.com/media/6f0593c03b631d42c639ba629b129baf&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;OUTPUT:-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*9Sl3gptaiSGcN2a3eebqsg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hurray, we’ve just generated an image using Deep Dream.
In, case you don’t like to code the Deep Dream algorithm manually but want to create images with Deep Dream then here is the solution.
You can use DeepDreamGenerator.&lt;/p&gt;

&lt;p&gt;LINK:-
&lt;a href=&quot;https://deepdreamgenerator.com/&quot;&gt;&lt;strong&gt;Deep Dream Generator&lt;/strong&gt;
&lt;em&gt;The technique is a much more advanced version of the original Deep Dream approach. It is capable of using its own…&lt;/em&gt;deepdreamgenerator.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note:- In the above example some lines of codes are not showing because in Medium the first 11 lines of GitHub gist are only displayed. So I strongly suggest you to download colab notebook(.ipnyb file) from my GitHub repo.&lt;/p&gt;

&lt;p&gt;Link of my Deep_Dream repo:-
&lt;a href=&quot;https://github.com/abhinavsp0730/Deep_Dream&quot;&gt;&lt;strong&gt;abhinavsp0730/Deep_Dream&lt;/strong&gt;
&lt;em&gt;Deep Dream model of my Medium Blog. Contribute to abhinavsp0730/Deep_Dream development by creating an account on…&lt;/em&gt;github.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;refrences-tensorflows-official-documentaion&quot;&gt;Refrences: Tensorflow’s official Documentaion&lt;/h3&gt;

&lt;p&gt;Do you know what, you can hit the clap button 50 times in medium?
If you like this blog, show some love by doing claps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*HnhqbqJ1vlHFEZmO5oEtqQ.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;THANK YOU.&lt;/p&gt;</content><author><name></name></author><summary type="html">Diving Into Deep Dream using Tensorflow | Towards AI</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://abhinavsp0730.github.io/neurlap/images/article2.jpeg" /><media:content medium="image" url="https://abhinavsp0730.github.io/neurlap/images/article2.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to Use scikit-learn ‘eli5’ Library to Compute Permutation Importance?</title><link href="https://abhinavsp0730.github.io/neurlap/markdown/2019/07/07/How-to-Use-scikit-learn-eli5-Library-to-Compute-Permutation-Importance.html" rel="alternate" type="text/html" title="How to Use scikit-learn ‘eli5’ Library to Compute Permutation Importance?" /><published>2019-07-07T00:00:00-05:00</published><updated>2019-07-07T00:00:00-05:00</updated><id>https://abhinavsp0730.github.io/neurlap/markdown/2019/07/07/How-to-Use-scikit-learn-eli5-Library-to-Compute-Permutation-Importance</id><content type="html" xml:base="https://abhinavsp0730.github.io/neurlap/markdown/2019/07/07/How-to-Use-scikit-learn-eli5-Library-to-Compute-Permutation-Importance.html">&lt;h3 id=&quot;feature-permutation-importance-with-eli5--towards-ai&quot;&gt;Feature Permutation Importance with ‘eli5’ | &lt;a href=&quot;https://towardsai.net/&quot;&gt;Towards AI&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&quot;how-to-use-scikit-learn-eli5-library-to-compute-permutation-importance&quot;&gt;How to Use scikit-learn ‘eli5’ Library to Compute Permutation Importance?&lt;/h2&gt;

&lt;h3 id=&quot;understanding-the-workings-of-scikit-learns-eli5-library-to-compute-feature-importance-on-a-sample-housing-dataset-and-interpreting-its-results&quot;&gt;Understanding the workings of scikit-learn’s ‘eli5’ library to compute feature importance on a sample housing dataset and interpreting its results&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*U1LPRoodN_CLmwq2SnFhPQ.jpeg&quot; alt=&quot;cc: Forbes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Most of the Data Scientist(ML guys) treat their machine learning model as a black-box. They don’t know what are the things which are happening underhood.
 They load their data, do manual data cleaning &amp;amp; prepare their data to fit it on ml modal. Then the train their model &amp;amp; predict the target values(regression problem).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But they don’t know, what features does their model think are important?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*TBnt_U1s-X_f9Eham_plCQ.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For answering the above question Permutation Importance comes into the picture.&lt;/p&gt;

&lt;h2 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;Permutation Importance is an algorithm that computes importance scores
for each of the feature variables of a dataset,
The importance measures are determined by computing the sensitivity of a model to random permutations of feature values.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;The concept is really straightforward: 
We measure the importance of a feature by calculating the increase in the model’s prediction error after permuting the feature. 
A feature is “important” if shuffling its values increases the model error because in this case, the model relied on the feature for the prediction.
A feature is “unimportant” if shuffling its values leave the model error unchanged because in this case, the model ignored the feature for the prediction.&lt;/p&gt;

&lt;h2 id=&quot;should-i-compute-importance-on-training-or-test-datavalidation-data&quot;&gt;Should I compute importance on Training or Test data(validation data)?&lt;/h2&gt;

&lt;p&gt;The answer to this question is, we always measure permutation importance on test data.
 permutation importance based on training data is garbage. The permutation importance based on training data makes us mistakenly believe that features are important for the predictions when in reality the model was just overfitting and the features were not important at all.&lt;/p&gt;

&lt;h2 id=&quot;eli5--a-scikit-learn-library-&quot;&gt;eli5 — a scikit-learn library:-&lt;/h2&gt;

&lt;p&gt;eli5 is a scikit learn library, used for computing permutation importance.&lt;/p&gt;

&lt;h3 id=&quot;caution-to-take-before-using-eli5-&quot;&gt;caution to take before using eli5:-&lt;/h3&gt;

&lt;p&gt;**1. **Permutation Importance is calculated after a model has been fitted.&lt;/p&gt;

&lt;p&gt;**2. **We always compute permutation importance on test data(Validation Data).&lt;/p&gt;

&lt;p&gt;**3. **The output of eli5 is in HTML format. So, we can only use it in the ipython notebook(i.e Jupiter notebook, google collab &amp;amp; kaggle kernel, etc).&lt;/p&gt;

&lt;h2 id=&quot;now-let-us-get-some-test-of-codes-&quot;&gt;Now, let us get some test of codes 😋&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*FKiXevC6N5GwuurghctByw.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve built a rudimentary model(RandomForestRegressor) to predict the sale price of the housing data set.
 This is a good dataset example for showing the Permutation Importance because this dataset has a lot of features.
So, we can see which features make an impact while predicting the values and which are not.&lt;/p&gt;

&lt;iframe src=&quot;https://medium.com/media/403caf5e064b28b365194f1d03ecf74d&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;em&gt;Now, we use the ‘eli5’ library to calculate Permutation importance.&lt;/em&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://medium.com/media/91c8acade31aa861b8d5e1be98f37473&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;em&gt;you can see the output of the above code below:-&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*8uCcJc3BZrJ1QdIGXPpXDQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;interpreting-results-&quot;&gt;Interpreting Results:-&lt;/h2&gt;

&lt;p&gt;Features have decreasing importance in top-down order. 
The first number in each row shows the reduction in model performance by the reshuffle of that feature. 
The second number is a measure of the randomness of the performance reduction for different reshuffles of the feature column. 
 overallQual(overall quality) feature of the housing data set makes the biggest impact in the model while predicting the Sale Price.&lt;/p&gt;

&lt;h3 id=&quot;you-can-get-the-housing-data-set-in-csv-format-from-my-github-profile&quot;&gt;&lt;em&gt;You can get the housing-data set in .csv format from my GitHub profile&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;LINK:- &lt;a href=&quot;https://github.com/abhinavsp0730/housing_data/blob/master/home-data-for-ml-course.zip&quot;&gt;https://github.com/abhinavsp0730/housing_data/blob/master/home-data-for-ml-course.zip&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;you-can-also-get-ipnyb-filekaggle-kernel-file-from-my-github-profile&quot;&gt;You can also get .ipnyb file(kaggle Kernel) file from my GitHub profile&lt;/h3&gt;
&lt;p&gt;LINK:-&lt;/p&gt;

&lt;h3 id=&quot;httpsgithubcomabhinavsp0730housing_datablobmasterkernel659579854a2ipynb&quot;&gt;&lt;a href=&quot;https://github.com/abhinavsp0730/housing_data/blob/master/kernel659579854a(2).ipynb&quot;&gt;https://github.com/abhinavsp0730/housing_data/blob/master/kernel659579854a(2).ipynb&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;thank-you&quot;&gt;THANK YOU&lt;/h3&gt;

&lt;h3 id=&quot;if-you-enjoy-my-article-then-do-claps-and-follow-me-️&quot;&gt;If you enjoy my article then do claps and follow me ❤️.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*HnhqbqJ1vlHFEZmO5oEtqQ.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Feature Permutation Importance with ‘eli5’ | Towards AI</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://abhinavsp0730.github.io/neurlap/images/article3.jpeg" /><media:content medium="image" url="https://abhinavsp0730.github.io/neurlap/images/article3.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>