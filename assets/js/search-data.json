{
  
    
        "post0": {
            "title": "TensorFlow callbacks in action",
            "content": "TensorFlow Callbacks in Action . . In layman terms, if I want to introduce callbacks, then it’s the controller by which you can control your plane. Without these controllers, you’re not having any control over the plane, and you’ll crash. . Callbacks: from keras.io, a callback is an object that can perform actions at various stages of training (e.g., at the start or end of an epoch, before or after a single batch, etc.). . It means that callbacks are the functions by which you can perform a particular task during the training process of your model. So, what can you do with these callbacks? . You can perform a particular task after the starting and ending of the training/batch/ epochs. | You can periodically save the model states in the disk. | You can schedule the learning rate as per your task. | You can automatically stop the training when a particular condition becomes True. | And you can do anything during the training process by subclassing these callbacks. | For example, you can make your training output clean and colorful like this, pretty awesome, right? . . Tensorflow provides a wide range of callbacks under the base class “tf.keras.callbacks. “For the full list of callbacks please visit TensorFlow’s website. . In this article, we’re going to cover some of the essential TensorFlow callbacks and how to use them to have full control over the training. . The context of this article are:- . custom callbacks by subclassing callback class. | Early stopping callback. | Model checkpoint callback. | ReduceOnPlateu callback. | Learning rate Scheduler. | Bonus package for making the output clean and colorful, as shown above. | But let’s first load the cats_vs_dogs dataset, I’ve been using the very small subclass of the original dataset. And then, let’s define our model architecture using sequential API. Throughout this article, I’m using this dataset and this model architecture. . . . . Note:- This article is all about the TensorFlow callbacks and not for making a world-class ML model and for achieving the state-of-art result. So, throughout this article, ignore the loss and the metrics and try to focus on how to use these callbacks. The dataset is minimal, and it may overfit, but you can ignore all these things. . So, without further delay, let’s start learning about the callbacks mentioned above. . 1. Custom callbacks by subclassing callback class. . These callbacks come under the base class “tf.keras.callbacks.” By subclassing these callbacks, we can perform certain functions when the training/batch/epochs have started or ended. For this, we can override the function of callback classes. The name of these functions is self explain their behavior. For example def on_train_begin(), this means what to do when training will begin. Let’s see below how to override these functions. We can also, monitor logs and perform certain actions, generally at the starting or the ending of the training/batch/epochs. . . Output: . . 2. EarlyStopping Callback. . Suppose we don’t know about the callbacks, and you want to prevent the overfitting of the model caused by training our model into extra epochs(we’re not god so that we know at how many epochs our model is going to converge). So, we plot the val_loss vs. epochs graph and examine how many epochs it’s started overfitting the data. Then we’ll re-train our model in less than that epoch number. What if I’ll tell you don’t have to do this thing manually. Yes, you can do this by using EarlyStopping Callback. So, let’s see how one can use this callback. . First, import the callback, and then create the instance of the EarlyStopping callback and pass the arguments as per our needs. Lemme explain these arguements . . “monitor” you can pass the loss or the metric. Generally, we pass val_loss and monitor it. . | “min_delta” you can pass an integer in this argument. In simple words, you’re telling the callback that the model is not improving if it’s not decreasing more/less than the loss/metrics. . | “patience,” it means about how many epochs to wait. And after that, if there is no improvement seen in the model performance according to the value of “min delta,” then stop the training. . | “mode” By default it’s set to ‘auto’ this comes handy when you’re dealing with the custom loss/metric. So, you can tell the callback whether the model is improving when its custom loss/metric is decreasing then set it to “min” or increasing then set it to “max.” . | . . 3. ReduceLROnPlateau. . This callback is used to reduce the learning rate if there is not any improvement in the loss/metric. . The arguments are: . “monitor” it’s set to that loss/metric as a string of which we are reducing the learning if it’ll not improve. . | “factor” You can pass an integer in this argument, and say your current learning rate is LR, then if there is not any improvement seen in the monitored loss/metric, then the learning is going to decrease by that “factor.” i.e new learning rate = lr * factor . | “Verbose” You can set verbose =1 to see the learning rate at every epoch. Or verbose = 0 to disable it. . | . The argument min_delta and mode are the same as explained in the arguments of EarlyStopping Callback. . . 4. ModelCheckpoint . Let’s imagine you’re training a heavy model like Bert in colab, and it requires a lot of time for training. So, you started the model training and went for sleep. And then the next morning you wake up, and you open your colab. But you’ll see the “Runtime Disconnect” message on your screen. Sounds like a nightmare tough? For this problem, ModelCheckpoint comes as a savior in our life. We can save the checkpoints at the end of every epoch. So, that we can load the weights or resume the training if something terrible happens while training. . So, let’s see how we can use this callback. We can save the model checkpoint in Keras h5/hd5 format or TensorFlow pb format. If you pass the argument “filepath= model.h5”(.h5 extension) it’ll be saved in the Keras format or “filepath= model.p”(.pb extension) for saving in the TensorFlow model format. . Also, there are two options to save the checkpoint either you can save the entire architecture+weights or just the weights. You can do this by setting “save_only_weights=True” or “save_only_weights=False” . . 5. LearningRateScheduler . The simplest way to schedule the learning is to decrease the learning rate linearly from a large initial value to a small value. This allows large weight changes at the beginning of the the learning process and small changes or fine-tuning towards the end of the learning process. . Let’s see how to schedule the learning rate. For this, we have to define an auxiliary function that contains the rules for alternating the learning rate. And then we can simply pass the name of this auxiliary function to the argument of the object of the LearningRateScheduler class. . . Output: . . lastly here is the utility file to make training output cleaner and colorful. . . Resources . Repository on Github: . You can run all the code above on Google’s colab. .",
            "url": "https://abhinavsp0730.github.io/neurlap/markdown/2020/06/10/TENSORFLOW-CALLBACKS-IN-ACTION.html",
            "relUrl": "/markdown/2020/06/10/TENSORFLOW-CALLBACKS-IN-ACTION.html",
            "date": " • Jun 10, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://abhinavsp0730.github.io/neurlap/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://abhinavsp0730.github.io/neurlap/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Tf.estimator, a Tensorflow High-level API",
            "content": "Tf.estimator, a Tensorflow High-level API . . Now Tensorflow 2.0 has been officially released and it’s having two high-level deep learning APIs. The first one is tf.keras and another one is tf.estimator. You can see the list of TensorFlow’s Python API in the picture above. Some of you are familiar with building an ML model using Keras. But we’re not so familiar with tf.estimator (Assuming we refer to a beginner in ML). So let us understand tf.estimator. . The context of this article is: . Giving you an idea about what tf.estimator is all about. 2.What tasks we’ve to follow while writing the TensorFlow program based on Estimators(pre-made Estimators). | Advantages . 4.Estimators capabilities. | We’re going to build and test a model by using tf.estimator that classifies iris flowers into there species. | What is tf.estimator? . An Estimator is TensorFlow’s high-level representation of a complete model, and it has been designed for easy scaling and asynchronous training. It’s used to train the neural network model and use them to predict new data. It’s a high-level API that sits on top of the low-level core TensorFlow API. One can use a pre-made estimator or custom estimator. . 1. Pre-made Estimators . Pre-made Estimators enable you to work at a much higher conceptual level than the base TensorFlow APIs. You no longer have to worry about creating the computational graph or sessions since Estimators handle all the “plumbing” for you. Furthermore, pre-made Estimators let you experiment with different model architectures by making only minimal code changes. tf.estimator. DNNClassifier, for example, is a pre-made Estimator class that trains classification models based on dense, feed-forward neural networks. . 2. Custom estimator . The heart of every Estimator — whether pre-made or custom — is its model function, which is a method that builds graphs for training, evaluation, and prediction. When you are using a pre-made Estimator, someone else has already implemented the model function. When relying on a custom Estimator, you must write the model function yourself. In this model, we’re mainly dealing with pre-made estimators . Tasks for writing TensorFlow pre-made estimators. . . 1.Create one or more input functions. . Define the model’s feature columns. | Instantiate an Estimator, specifying the feature columns and various hyperparameters. | Call one or more methods on the Estimator object, passing the appropriate input function as the source of the data. | Later in this article, we’re going to implement the above tasks for iris classification. . Advantages . The tf.estimator provides some capabilities currently still under development for tf.keras. . #These are:- #1.We can conduct distributed training across multiple servers with the Estimators API #2.Full TFX integration. #TensorFlow Extended (TFX) is an end-to-end platform for deploying production ML pipelines. The tf.estimator is supported for fully TFX integration. . Estimators capabilities . Estimators provide the following benefits: . You can run Estimator-based models on a localhost or a distributed multi-server environment without changing your model. Furthermore, you can run Estimator-based models on CPUs, GPUs, or TPUs without recoding your model. . | Estimators provide a safely distributed training loop that controls how and when to: (a)load data (b)handle exceptions ©create checkpoint files and recover from failures (d)save summaries for TensorBoard . | Iris classifier using tf.estimator . We’re going to build an iris classifier using tf.estimator. The dataset we’re using is iris data set which is having four features sepal length, sepal width, petal length &amp; petal width and three labels Setosa, Versicolor &amp; Virginica. But first, we import all the dependencies . from __future__ import absolute_import, division, print_function, unicode_literals import tensorflow as tf import pandas as pd . And then we preprocess the data to perform the following task:- . (a)Create one or more input functions. (b)Define the model’s feature columns. (c )Instantiate an Estimator, specifying the feature columns and various hyperparameters. (d)Call one or more methods on the Estimator object, passing the appropriate input function as the source of the data. . Preprocessing the data . CSV_COLUMN_NAMES = [&#39;SepalLength&#39;, &#39;SepalWidth&#39;, &#39;PetalLength&#39;, &#39;PetalWidth&#39;, &#39;Species&#39;] SPECIES = [&#39;Setosa&#39;, &#39;Versicolor&#39;, &#39;Virginica&#39;] . Downloading the data set. . train_path = tf.keras.utils.get_file( &quot;iris_training.csv&quot;, &quot;https://storage.googleapis.com/download.tensorflow.org/data/iris_training.csv&quot;) test_path = tf.keras.utils.get_file( &quot;iris_test.csv&quot;, &quot;https://storage.googleapis.com/download.tensorflow.org/data/iris_test.csv&quot;) train = pd.read_csv(train_path, names=CSV_COLUMN_NAMES, header=0) test = pd.read_csv(test_path, names=CSV_COLUMN_NAMES, header=0) . Creating an input function . You must create input functions to supply data for training, evaluating, and prediction. . An input function is a function that returns a tf.data.Dataset object which outputs the following two-element tuple: . features — A Python dictionary in which: (a)Each key is the name of a feature. (b)Each value is an array containing all of that feature’s values. label — An array containing the values of the label for every example. We’re using pandas for building input pipeline . def input_fn(features, labels, training=True, batch_size=256): &quot;&quot;&quot;An input function for training or evaluating&quot;&quot;&quot; # Convert the inputs to a Dataset. dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels)) # Shuffle and repeat if you are in training mode. if training: dataset = dataset.shuffle(1000).repeat() return dataset.batch(batch_size) . Define the feature columns . A feature column is an object describing how the model should use raw input data from the features dictionary. When you build an Estimator model, we pass it a list of feature columns that describe each of the features you want the model to use. The tf.feature_column module provides many options for representing data to the model. . For Iris, the 4 raw features are numeric values, so we’ll build a list of feature columns to tell the Estimator model to represent each of the four features as 32-bit floating-point values. Therefore, the code to create the feature column is: . # Feature columns describe how to use the input. my_feature_columns = [] for key in train.keys(): my_feature_columns.append(tf.feature_column.numeric_column(key=key)) . Instantiate an estimator . The Iris problem is a classic classification problem. Fortunately, TensorFlow provides several pre-made classifier Estimators, including: . a. tf.estimator.DNNClassifier for deep models that perform multi-class classification. b. tf.estimator.DNNLinearCombinedClassifier for wide &amp; deep models. c. tf.estimator.LinearClassifier for classifiers based on linear models. . For the Iris problem, tf.estimator.DNNClassifier seems like the best choice. Here’s how we instantiated this Estimator: . # Build a DNN with 2 hidden layers with 30 and 10 hidden nodes each. classifier = tf.estimator.DNNClassifier( feature_columns=my_feature_columns, # Two hidden layers of 10 nodes each. hidden_units=[30, 10], # The model must choose between 3 classes. n_classes=3) . Train, Evaluate, and Predict . Train the model Train the model by calling the Estimator’s train method as follows: . # Train the Model. classifier.train( input_fn=lambda: input_fn(train, train_y, training=True), steps=5000) . Evaluate . Now that the model has been trained, you can get some statistics on its performance. The following code block evaluates the accuracy of the trained model on the test data: . eval_result = classifier.evaluate( input_fn=lambda: input_fn(test, test_y, training=False)) print(&#39; nTest set accuracy: {accuracy:0.3f} n&#39;.format(**eval_result)) . After evaluating it we’ll get an accuracy of about 56% . Making predictions (inferring) from the trained model . You now have a trained model that produces good evaluation results. You can now use the trained model to predict the species of an Iris flower based on some unlabeled measurements. As with training and evaluation, you make predictions using a single function call: . # Generate predictions from the model expected = [&#39;Setosa&#39;, &#39;Versicolor&#39;, &#39;Virginica&#39;] predict_x = { &#39;SepalLength&#39;: [5.1, 5.9, 6.9], &#39;SepalWidth&#39;: [3.3, 3.0, 3.1], &#39;PetalLength&#39;: [1.7, 4.2, 5.4], &#39;PetalWidth&#39;: [0.5, 1.5, 2.1], } def input_fn(features, batch_size=256): &quot;&quot;&quot;An input function for prediction.&quot;&quot;&quot; # Convert the inputs to a Dataset without labels. return tf.data.Dataset.from_tensor_slices(dict(features)).batch(batch_size) predictions = classifier.predict( input_fn=lambda: input_fn(predict_x)) . The predict method returns a Python iterable, yielding a dictionary of prediction results for each example. The following code prints a few predictions and their probabilities: . for pred_dict, expec in zip(predictions, expected): class_id = pred_dict[&#39;class_ids&#39;][0] probability = pred_dict[&#39;probabilities&#39;][class_id] print(&#39;Prediction is &quot;{}&quot; ({:.1f}%), expected &quot;{}&quot;&#39;.format( SPECIES[class_id], 100 * probability, expec)) . We’ll get an output like this . INFO:tensorflow:Calling model_fn. INFO:tensorflow:Done calling model_fn. INFO:tensorflow:Graph was finalized. INFO:tensorflow:Restoring parameters from /tmp/tmpy5w5zoj8/model.ckpt-5000 INFO:tensorflow:Running local_init_op. INFO:tensorflow:Done running local_init_op. Prediction is &quot;Setosa&quot; (73.0%), expected &quot;Setosa&quot; Prediction is &quot;Virginica&quot; (42.6%), expected &quot;Versicolor&quot; Prediction is &quot;Virginica&quot; (49.0%), expected &quot;Virginica&quot; . Refrences:- Tensorflow’s official Documentation . Hope you like this article . Do you know what, you can hit the clap button 50 times in medium? If you like this blog, show some love by doing claps. . .",
            "url": "https://abhinavsp0730.github.io/neurlap/markdown/2019/10/07/Tf.estimator-a-Tensorflow-High-level-API.html",
            "relUrl": "/markdown/2019/10/07/Tf.estimator-a-Tensorflow-High-level-API.html",
            "date": " • Oct 7, 2019"
        }
        
    
  
    
        ,"post4": {
            "title": "Tf.estimator, a Tensorflow High-level API",
            "content": "Diving Into Deep Dream using Tensorflow | Towards AI . Exploring Deep Dream using Tensorflow 2.0 . . . Whenever any person hears about Deep Learning or Neural Network the things which first come into their mind are that it’s used for Object Detection, Face Recognition, Natural Language Processing, and Speech Recognition. But Neural Network is also capable of generating images. And one of the state-of-the-art methods is called Deep Dream. . What is it? . Deep Dream is a computer vision program created by Google engineer Alex Mordvintsev which uses a convolutional neural network to find and enhance patterns in images via algorithmic pareidolia, thus creating a Dream-like hallucinogenic appearance in the deliberately over-processed images. . Some images which is generated using Deep Dream . . . . . How does it work? . In simple terms, many levels of neural networks process the images input into the program. The artificial neurons are calculated and the weight of their sum processed through the roughly three-layered network: low, intermediate, and high-level layers. The lower levels are responsible for more basic edges, corners, and textures. By maximizing those levels, the picture would end up looking more like a Van Gogh. The higher levels are responsible for more detailed, hierarchical input like buildings and other elaborate objects. When the higher levels are maximized, the picture looks more like a jumbled Dali. . Let us create our first simple Deep Dream. . In this tutorial, we’re going to use Tensorflow 2.0 and we run it on Google Colab. In the following 6 steps, we’re going to build our first deep dream model. So let’s get started. . 1. Importing all dependencies . Here we’re going to use Indian actress Deepika Padukone image and then preproccess it. . output:- . . 2. Prepare the feature extraction model . Download and prepare a pre-trained image classification model. You will use InceptionV3 which is similar to the model originally used in DeepDream. The InceptionV3 architecture is quite large (for a graph of the model architecture see TensorFlow’s research repo). For DeepDream, the layers of interest are those where the convolutions are concatenated. There are 11 of these layers in InceptionV3, named ‘mixed0’ though ‘mixed10’. Using different layers will result in different dream-like images. Deeper layers respond to higher-level features (such as eyes and faces), while earlier layers respond to simpler features (such as edges, shapes, and textures). Feel free to experiment with the layers selected below, but keep in mind that deeper layers (those with a higher index) will take longer to train on since the gradient computation is deeper. . 3. Calculate loss . The loss is the sum of the activations in the chosen layers. The loss is normalized at each layer so the contribution from larger layers does not outweigh smaller layers. . 4. Gradient ascent . Once you have calculated the loss for the chosen layers, all that is left is to calculate the gradients with respect to the image and add them to the original image. Adding the gradients to the image enhances the patterns seen by the network. At each step, you will have created an image that increasingly excites the activations of certain layers in the network. . OUTPUT:- . . 5. Taking it up an octave . Pretty good, but there are a few issues with this first attempt: (a) The output is noisy (this could be addressed with a tf.image.total_variation loss). (b)The image is low resolution. (c)The patterns appear like they’re all happening at the same granularity. To overcome these issues we can perform the previous gradient ascent approach, then increase the size of the image (which is referred to as an octave), and repeat this process for multiple octaves. . OUTPUT:- . . Hurray, we’ve just generated an image using Deep Dream. In, case you don’t like to code the Deep Dream algorithm manually but want to create images with Deep Dream then here is the solution. You can use DeepDreamGenerator. . LINK:- Deep Dream Generator The technique is a much more advanced version of the original Deep Dream approach. It is capable of using its own…deepdreamgenerator.com . Note:- In the above example some lines of codes are not showing because in Medium the first 11 lines of GitHub gist are only displayed. So I strongly suggest you to download colab notebook(.ipnyb file) from my GitHub repo. . Link of my Deep_Dream repo:- abhinavsp0730/Deep_Dream Deep Dream model of my Medium Blog. Contribute to abhinavsp0730/Deep_Dream development by creating an account on…github.com . Refrences: Tensorflow’s official Documentaion . Do you know what, you can hit the clap button 50 times in medium? If you like this blog, show some love by doing claps. . . THANK YOU. .",
            "url": "https://abhinavsp0730.github.io/neurlap/markdown/2019/09/14/Exploring-Deep-Dream-using-Tensorflow-2.html",
            "relUrl": "/markdown/2019/09/14/Exploring-Deep-Dream-using-Tensorflow-2.html",
            "date": " • Sep 14, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Articles",
          "content": "I write deeplearning/machine learning blogs on medium under the famous publications: . Towards AI. | Analytics Vidya. Here is my all published articles, you can read these blogs on medium or in this site. . | Tensorflow Callbacks in action . Read on Medium | Read on this site | . | Tf.estimator, a Tensorflow High-level API . Read on Medium | Read on this site | . | Exploring Deep Dream using Tensorflow 2.0 . Read on Medium | Read on this site | . | How to Use scikit-learn ‘eli5’ Library to Compute Permutation Importance? . Read on Medium | Read on this site | . | Understanding the Backpropagation Algorithm . Read on Medium | Read on this site | . | .",
          "url": "https://abhinavsp0730.github.io/neurlap/articles/",
          "relUrl": "/articles/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Projects",
          "content": "This page contains all of my Projects . youtube: https://www.youtube.com/watch?v=yQ-4SiZxMNM&amp;t=1s . Project Antivenom . Project AntiVenom is an innovative idea of bringing technology into the aid of human problems. Currently, region-specific for the Indian state of Odisha, this project aims at improving the disastrous situation between humans and snake There is no pre-made snake dataset present on the internet. So I’ve prepared the dataset. Then I performed transfer learning using tensorflow 2.0 and its high-level API keras and using mobile net model due to its lightweight nature. Then this model is able to classify the snake’s breed and whether it’s venomous or not. Then using Tensorflow Lite I served this model into android for production. Also, this project is featured in the newspaper: Link Android app Playstore link: Link Visit the website: Link . | Xiken.tech . About this Project An organization driven by young minds who don’t only focus on problems around us, but believe in the concept of “Innovate To Solve” | Our Mission With enthusiasm and compassion towards our planet and its people, we are not here just to complain about the problems, we are here to solve and simplify. Our projects will be for this world and its inhabitants, and as we proceed, we want to indulge as many people as we can into our mission. | Our Plan Beginning this journey of innovation, we will be launching “Project AntiVenom”. After which, similar projects with the motive of “Innovate to Solve” will follow. At the same time, we will be open to collaborations. Our projects will be open sourced, so that everyone who has the urge of “Innovate To Solve” can contribute. | Our Vision We believe that with the help of technology, every problem can be solved. Therefore, we want to innovate solutions which will help change the environment around us, and the world as a whole, one step at a time. We might be young, but we sure have the balls to make an impact. Project Link | . | .",
          "url": "https://abhinavsp0730.github.io/neurlap/project/",
          "relUrl": "/project/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Tweets",
          "content": "twitter: https://twitter.com/NeurlAP/status/1257629804070948865 .",
          "url": "https://abhinavsp0730.github.io/neurlap/tweets/",
          "relUrl": "/tweets/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "About Me",
          "content": "Give me the data and I’ll show you its true potential. I let computers see with the help of neural networks. I build End-to-End Machine Learning products. I know how to use data efficiently. Give me data and I’ll turn into them live projects. Helping humanity with the help of AI with this aim founded xiken.tech . I’m the lead of state-level project name ProjectAntivenom. I’m a speaker and a blogger who loves to help the community, who believes knowledge is of no use. if you don’t share and apply it. Reach out to me for spreading the knowledge of AI into your community events. I’m the co-organizer of PyData Bhubaneswar Chapter. ⚡⚡⚡⚡⚡ I’m open for internship opportunity and freelancing project ⚡⚡⚡⚡⚡⚡⚡⚡ 🛠️ Construct Ai solution for your real-world problem. 🛠️ Interested In to build Ai solution for Health Care . 🛠️ Looking For internship and freelancing project. 🛠️ Drop an Email to abhinavsp0730@gmail.com for further discussion. .",
          "url": "https://abhinavsp0730.github.io/neurlap/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://abhinavsp0730.github.io/neurlap/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}